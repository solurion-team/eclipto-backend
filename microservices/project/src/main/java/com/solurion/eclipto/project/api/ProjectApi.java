/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.solurion.eclipto.project.api;

import com.solurion.eclipto.project.dto.CreateProjectRequest;
import com.solurion.eclipto.project.dto.ErrorDto;
import com.solurion.eclipto.project.dto.ProjectAuthorityDto;
import com.solurion.eclipto.project.dto.ProjectInfoDto;
import com.solurion.eclipto.project.dto.UpdateProjectRequest;
import com.solurion.eclipto.project.dto.UserInfoDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.4.0")
@Validated
@Tag(name = "project", description = "the project API")
public interface ProjectApi {

    /**
     * POST /v1/project/{projectId}/authorities
     * Create project authorities
     *
     * @param projectId ID of a project (required)
     * @param projectAuthorityDto Request to create a project authorities (optional)
     * @return Project authorities (status code 200)
     *         or Project authorities not found (status code 403)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "createProjectAuthorities",
        description = "Create project authorities",
        tags = { "project" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Project authorities", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectAuthorityDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "Project authorities not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerHttpAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/project/{projectId}/authorities",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<ProjectAuthorityDto> createProjectAuthorities(
        @Parameter(name = "projectId", description = "ID of a project", required = true, in = ParameterIn.PATH) @PathVariable("projectId") Long projectId,
        @Parameter(name = "ProjectAuthorityDto", description = "Request to create a project authorities") @Valid @RequestBody(required = false) ProjectAuthorityDto projectAuthorityDto
    );


    /**
     * DELETE /v1/projects/{projectId}
     * Permanently delete project
     *
     * @param projectId ID of a project (required)
     * @return The project has been deleted (status code 204)
     *         or Project not found (status code 403)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "deleteProject",
        description = "Permanently delete project",
        tags = { "project" },
        responses = {
            @ApiResponse(responseCode = "204", description = "The project has been deleted", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectInfoDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "Project not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerHttpAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/projects/{projectId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<ProjectInfoDto> deleteProject(
        @Parameter(name = "projectId", description = "ID of a project", required = true, in = ParameterIn.PATH) @PathVariable("projectId") Long projectId
    );


    /**
     * GET /v1/project/{projectId}/authorities
     * Get information about users authorities
     *
     * @param projectId ID of a project (required)
     * @return Project authorities (status code 200)
     *         or Project authorities not found (status code 403)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getProjectAuthorities",
        description = "Get information about users authorities",
        tags = { "project" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Project authorities", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProjectAuthorityDto.class)))
            }),
            @ApiResponse(responseCode = "403", description = "Project authorities not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerHttpAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/project/{projectId}/authorities",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<ProjectAuthorityDto>> getProjectAuthorities(
        @Parameter(name = "projectId", description = "ID of a project", required = true, in = ParameterIn.PATH) @PathVariable("projectId") Long projectId
    );


    /**
     * GET /v1/projects/{projectId}
     * Get full project info
     *
     * @param projectId ID of a project (required)
     * @return The project has been found (status code 200)
     *         or Project not found (status code 403)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getProjectInfo",
        description = "Get full project info",
        tags = { "project" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The project has been found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectInfoDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "Project not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerHttpAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/projects/{projectId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<ProjectInfoDto> getProjectInfo(
        @Parameter(name = "projectId", description = "ID of a project", required = true, in = ParameterIn.PATH) @PathVariable("projectId") Long projectId
    );


    /**
     * GET /v1/projects
     * Get all user project (or all workspace&#x60;s project)
     *
     * @param workspaceId ID of a workspace (optional)
     * @return The project has been found (status code 200)
     *         or Project not found (status code 403)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getProjects",
        description = "Get all user project (or all workspace`s project)",
        tags = { "project" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The project has been found", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProjectInfoDto.class)))
            }),
            @ApiResponse(responseCode = "403", description = "Project not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerHttpAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/projects",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<ProjectInfoDto>> getProjects(
        @Parameter(name = "workspaceId", description = "ID of a workspace", in = ParameterIn.QUERY) @Valid @RequestParam(value = "workspaceId", required = false) Long workspaceId
    );


    /**
     * GET /v1/projects/{projectId}/members
     * Get all users by project id
     *
     * @param projectId ID of a project (required)
     * @return Users found (status code 200)
     *         or Users not found (status code 403)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getUsersByIds",
        description = "Get all users by project id",
        tags = { "project" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Users found", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserInfoDto.class)))
            }),
            @ApiResponse(responseCode = "403", description = "Users not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerHttpAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/projects/{projectId}/members",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<UserInfoDto>> getUsersByIds(
        @Parameter(name = "projectId", description = "ID of a project", required = true, in = ParameterIn.PATH) @PathVariable("projectId") Long projectId
    );


    /**
     * POST /v1/projects
     * Create project with required information
     *
     * @param createProjectRequest Request to create a project (optional)
     * @return Project created successfully (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "postProject",
        description = "Create project with required information",
        tags = { "project" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Project created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectInfoDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerHttpAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/projects",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<ProjectInfoDto> postProject(
        @Parameter(name = "CreateProjectRequest", description = "Request to create a project") @Valid @RequestBody(required = false) CreateProjectRequest createProjectRequest
    );


    /**
     * PUT /v1/project/{projectId}/authorities
     * Update information about users authorities
     *
     * @param projectId ID of a project (required)
     * @param projectAuthorityDto Request to update a project authorities (optional)
     * @return Project authorities (status code 200)
     *         or Project authorities not found (status code 403)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "updateProjectAuthorities",
        description = "Update information about users authorities",
        tags = { "project" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Project authorities", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectAuthorityDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "Project authorities not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerHttpAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/v1/project/{projectId}/authorities",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<ProjectAuthorityDto> updateProjectAuthorities(
        @Parameter(name = "projectId", description = "ID of a project", required = true, in = ParameterIn.PATH) @PathVariable("projectId") Long projectId,
        @Parameter(name = "ProjectAuthorityDto", description = "Request to update a project authorities") @Valid @RequestBody(required = false) ProjectAuthorityDto projectAuthorityDto
    );


    /**
     * PUT /v1/projects/{projectId}
     * Update project infor
     *
     * @param projectId ID of a project (required)
     * @param updateProjectRequest Request to update a project (optional)
     * @return Project info updated successfully (status code 200)
     *         or There is no project with same ID (status code 403)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "updateProjectInfo",
        description = "Update project infor",
        tags = { "project" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Project info updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectInfoDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "There is no project with same ID", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerHttpAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/v1/projects/{projectId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<ProjectInfoDto> updateProjectInfo(
        @Parameter(name = "projectId", description = "ID of a project", required = true, in = ParameterIn.PATH) @PathVariable("projectId") Long projectId,
        @Parameter(name = "UpdateProjectRequest", description = "Request to update a project") @Valid @RequestBody(required = false) UpdateProjectRequest updateProjectRequest
    );

}
