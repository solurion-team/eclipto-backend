/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.solurion.eclipto.workspace.api;

import com.solurion.eclipto.workspace.dto.CreateWorkspaceRequest;
import com.solurion.eclipto.workspace.dto.ErrorDto;
import com.solurion.eclipto.workspace.dto.UpdateWorkspaceRequest;
import com.solurion.eclipto.workspace.dto.UserInfoDto;
import com.solurion.eclipto.workspace.dto.WorkspaceAuthorityDto;
import com.solurion.eclipto.workspace.dto.WorkspaceInfoDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.4.0")
@Validated
@Tag(name = "workspace", description = "the workspace API")
public interface WorkspaceApi {

    /**
     * POST /v1/workspace/{workspaceId}/authorities
     * Create workspace authorities
     *
     * @param workspaceId ID of a workspace (required)
     * @param workspaceAuthorityDto Request to create a workspace authorities (optional)
     * @return Workspace authorities (status code 200)
     *         or Workspace authorities not found (status code 403)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "createWorkspaceAuthorities",
        description = "Create workspace authorities",
        tags = { "workspace" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Workspace authorities", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkspaceAuthorityDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "Workspace authorities not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerHttpAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/workspace/{workspaceId}/authorities",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<WorkspaceAuthorityDto> createWorkspaceAuthorities(
        @Parameter(name = "workspaceId", description = "ID of a workspace", required = true, in = ParameterIn.PATH) @PathVariable("workspaceId") Long workspaceId,
        @Parameter(name = "WorkspaceAuthorityDto", description = "Request to create a workspace authorities") @Valid @RequestBody(required = false) WorkspaceAuthorityDto workspaceAuthorityDto
    );


    /**
     * DELETE /v1/workspaces/{workspaceId}
     * Permanently delete workspace
     *
     * @param workspaceId ID of a workspace (required)
     * @return The workspace has been deleted (status code 204)
     *         or Workspace not found (status code 403)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "deleteWorkspace",
        description = "Permanently delete workspace",
        tags = { "workspace" },
        responses = {
            @ApiResponse(responseCode = "204", description = "The workspace has been deleted", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkspaceInfoDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "Workspace not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerHttpAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/workspaces/{workspaceId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<WorkspaceInfoDto> deleteWorkspace(
        @Parameter(name = "workspaceId", description = "ID of a workspace", required = true, in = ParameterIn.PATH) @PathVariable("workspaceId") Long workspaceId
    );


    /**
     * GET /v1/workspaces/{workspaceId}/members
     * Get all users by workspace id
     *
     * @param workspaceId ID of a workspace (required)
     * @return Users found (status code 200)
     *         or Users not found (status code 403)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getUsersByIds",
        description = "Get all users by workspace id",
        tags = { "workspace" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Users found", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserInfoDto.class)))
            }),
            @ApiResponse(responseCode = "403", description = "Users not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerHttpAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/workspaces/{workspaceId}/members",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<UserInfoDto>> getUsersByIds(
        @Parameter(name = "workspaceId", description = "ID of a workspace", required = true, in = ParameterIn.PATH) @PathVariable("workspaceId") Long workspaceId
    );


    /**
     * GET /v1/workspace/{workspaceId}/authorities
     * Get information about users authorities
     *
     * @param workspaceId ID of a workspace (required)
     * @return Workspace authorities (status code 200)
     *         or Workspace authorities not found (status code 403)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getWorkspaceAuthorities",
        description = "Get information about users authorities",
        tags = { "workspace" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Workspace authorities", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = WorkspaceAuthorityDto.class)))
            }),
            @ApiResponse(responseCode = "403", description = "Workspace authorities not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerHttpAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/workspace/{workspaceId}/authorities",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<WorkspaceAuthorityDto>> getWorkspaceAuthorities(
        @Parameter(name = "workspaceId", description = "ID of a workspace", required = true, in = ParameterIn.PATH) @PathVariable("workspaceId") Long workspaceId
    );


    /**
     * GET /v1/workspaces/{workspaceId}
     * Get full workspace info
     *
     * @param workspaceId ID of a workspace (required)
     * @return The workspace has been found (status code 200)
     *         or Workspace not found (status code 403)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getWorkspaceInfo",
        description = "Get full workspace info",
        tags = { "workspace" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The workspace has been found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkspaceInfoDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "Workspace not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerHttpAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/workspaces/{workspaceId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<WorkspaceInfoDto> getWorkspaceInfo(
        @Parameter(name = "workspaceId", description = "ID of a workspace", required = true, in = ParameterIn.PATH) @PathVariable("workspaceId") Long workspaceId
    );


    /**
     * GET /v1/workspaces
     * Get user workspaces
     *
     * @return The workspace has been found (status code 200)
     *         or Workspace not found (status code 403)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getWorkspaces",
        description = "Get user workspaces",
        tags = { "workspace" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The workspace has been found", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = WorkspaceInfoDto.class)))
            }),
            @ApiResponse(responseCode = "403", description = "Workspace not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerHttpAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/workspaces",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<WorkspaceInfoDto>> getWorkspaces(
        
    );


    /**
     * POST /v1/workspaces
     * Create workspace with required information
     *
     * @param createWorkspaceRequest Request to create a workspace (optional)
     * @return Workspace created successfully (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "postWorkspace",
        description = "Create workspace with required information",
        tags = { "workspace" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Workspace created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkspaceInfoDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerHttpAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/workspaces",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<WorkspaceInfoDto> postWorkspace(
        @Parameter(name = "CreateWorkspaceRequest", description = "Request to create a workspace") @Valid @RequestBody(required = false) CreateWorkspaceRequest createWorkspaceRequest
    );


    /**
     * PUT /v1/workspace/{workspaceId}/authorities
     * Update information about users authorities
     *
     * @param workspaceId ID of a workspace (required)
     * @param workspaceAuthorityDto Request to update a workspace authorities (optional)
     * @return Workspace authorities (status code 200)
     *         or Workspace authorities not found (status code 403)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "updateWorkspaceAuthorities",
        description = "Update information about users authorities",
        tags = { "workspace" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Workspace authorities", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkspaceAuthorityDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "Workspace authorities not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerHttpAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/v1/workspace/{workspaceId}/authorities",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<WorkspaceAuthorityDto> updateWorkspaceAuthorities(
        @Parameter(name = "workspaceId", description = "ID of a workspace", required = true, in = ParameterIn.PATH) @PathVariable("workspaceId") Long workspaceId,
        @Parameter(name = "WorkspaceAuthorityDto", description = "Request to update a workspace authorities") @Valid @RequestBody(required = false) WorkspaceAuthorityDto workspaceAuthorityDto
    );


    /**
     * PUT /v1/workspaces/{workspaceId}
     * Update workspace infor
     *
     * @param workspaceId ID of a workspace (required)
     * @param updateWorkspaceRequest Request to update a workspace (optional)
     * @return Workspace info updated successfully (status code 200)
     *         or There is no workspace with same ID (status code 403)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "updateWorkspaceInfo",
        description = "Update workspace infor",
        tags = { "workspace" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Workspace info updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkspaceInfoDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "There is no workspace with same ID", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerHttpAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/v1/workspaces/{workspaceId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<WorkspaceInfoDto> updateWorkspaceInfo(
        @Parameter(name = "workspaceId", description = "ID of a workspace", required = true, in = ParameterIn.PATH) @PathVariable("workspaceId") Long workspaceId,
        @Parameter(name = "UpdateWorkspaceRequest", description = "Request to update a workspace") @Valid @RequestBody(required = false) UpdateWorkspaceRequest updateWorkspaceRequest
    );

}
