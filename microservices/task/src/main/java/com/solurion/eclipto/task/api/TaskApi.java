/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.solurion.eclipto.task.api;

import com.solurion.eclipto.task.dto.CreateTaskRequest;
import com.solurion.eclipto.task.dto.CreateTaskStatusRequest;
import com.solurion.eclipto.task.dto.ErrorDto;
import com.solurion.eclipto.task.dto.TaskInfoDto;
import com.solurion.eclipto.task.dto.TaskLiteDto;
import com.solurion.eclipto.task.dto.TaskStatusDto;
import com.solurion.eclipto.task.dto.UpdateTaskRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.4.0")
@Validated
@Tag(name = "task", description = "Operations about task")
public interface TaskApi {

    /**
     * DELETE /v1/tasks/{taskId}
     * Permanently delete task
     *
     * @param taskId ID of a task (required)
     * @return The task has been deleted (status code 204)
     *         or Task not found (status code 403)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "deleteTask",
        description = "Permanently delete task",
        tags = { "task" },
        responses = {
            @ApiResponse(responseCode = "204", description = "The task has been deleted"),
            @ApiResponse(responseCode = "403", description = "Task not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerHttpAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/tasks/{taskId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Void> deleteTask(
        @Parameter(name = "taskId", description = "ID of a task", required = true, in = ParameterIn.PATH) @PathVariable("taskId") Long taskId
    );


    /**
     * GET /v1/tasks
     * Get all project tasks with full information
     *
     * @param projectId ID of a project that contains tasks (optional)
     * @return Get user tasks list (or project if query exists) (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getAllTasks",
        description = "Get all project tasks with full information",
        tags = { "task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Get user tasks list (or project if query exists)", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TaskInfoDto.class)))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerHttpAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/tasks",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<TaskInfoDto>> getAllTasks(
        @Parameter(name = "projectId", description = "ID of a project that contains tasks", in = ParameterIn.QUERY) @Valid @RequestParam(value = "projectId", required = false) Long projectId
    );


    /**
     * GET /v1/tasks/lite
     * Get all project tasks with lite information
     *
     * @param projectId ID of a project that contains tasks (optional)
     * @return User lite tasks list (or project if query exists) (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getLiteTasks",
        description = "Get all project tasks with lite information",
        tags = { "task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User lite tasks list (or project if query exists)", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TaskLiteDto.class)))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerHttpAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/tasks/lite",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<TaskLiteDto>> getLiteTasks(
        @Parameter(name = "projectId", description = "ID of a project that contains tasks", in = ParameterIn.QUERY) @Valid @RequestParam(value = "projectId", required = false) Long projectId
    );


    /**
     * GET /v1/projects/{projectId}/statuses
     * Get task statuses
     *
     * @param projectId ID of a project that contains tasks (required)
     * @param includeTasks Should include tasks (optional)
     * @return Tasks successfully fetched (status code 200)
     *         or There is no status with same ID (status code 403)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getProjectTaskStatuses",
        description = "Get task statuses",
        tags = { "task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Tasks successfully fetched", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TaskStatusDto.class)))
            }),
            @ApiResponse(responseCode = "403", description = "There is no status with same ID", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerHttpAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/projects/{projectId}/statuses",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<TaskStatusDto>> getProjectTaskStatuses(
        @Parameter(name = "projectId", description = "ID of a project that contains tasks", required = true, in = ParameterIn.PATH) @PathVariable("projectId") Long projectId,
        @Parameter(name = "includeTasks", description = "Should include tasks", in = ParameterIn.QUERY) @Valid @RequestParam(value = "includeTasks", required = false) Boolean includeTasks
    );


    /**
     * GET /v1/tasks/{taskId}
     * Get full task info
     *
     * @param taskId ID of a task (required)
     * @return The task has been found (status code 200)
     *         or Task not found (status code 403)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getTask",
        description = "Get full task info",
        tags = { "task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The task has been found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskInfoDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "Task not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerHttpAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/tasks/{taskId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<TaskInfoDto> getTask(
        @Parameter(name = "taskId", description = "ID of a task", required = true, in = ParameterIn.PATH) @PathVariable("taskId") Long taskId
    );


    /**
     * POST /v1/tasks/lite
     * Create task with lite information
     *
     * @param createTaskRequest Request to create a task (optional)
     * @return Task created successfully (status code 201)
     *         or There is no status with same ID (status code 403)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "postLiteTask",
        description = "Create task with lite information",
        tags = { "task" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Task created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskLiteDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "There is no status with same ID", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerHttpAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/tasks/lite",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<TaskLiteDto> postLiteTask(
        @Parameter(name = "CreateTaskRequest", description = "Request to create a task") @Valid @RequestBody(required = false) CreateTaskRequest createTaskRequest
    );


    /**
     * POST /v1/tasks/statuses
     * Create tasks status
     *
     * @param createTaskStatusRequest Request to create a task status (optional)
     * @return Status created successfully (status code 201)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "postTaskStatus",
        description = "Create tasks status",
        tags = { "task" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Status created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskStatusDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerHttpAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/tasks/statuses",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<TaskStatusDto> postTaskStatus(
        @Parameter(name = "CreateTaskStatusRequest", description = "Request to create a task status") @Valid @RequestBody(required = false) CreateTaskStatusRequest createTaskStatusRequest
    );


    /**
     * PUT /v1/tasks/{taskId}
     * Update task information
     *
     * @param taskId ID of a task (required)
     * @param updateTaskRequest Request to create a task (optional)
     * @return Task updated successfully (status code 200)
     *         or There is no task with same ID or status with same ID (status code 403)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "updateTask",
        description = "Update task information",
        tags = { "task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Task updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskInfoDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "There is no task with same ID or status with same ID", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerHttpAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/v1/tasks/{taskId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<TaskInfoDto> updateTask(
        @Parameter(name = "taskId", description = "ID of a task", required = true, in = ParameterIn.PATH) @PathVariable("taskId") Long taskId,
        @Parameter(name = "UpdateTaskRequest", description = "Request to create a task") @Valid @RequestBody(required = false) UpdateTaskRequest updateTaskRequest
    );


    /**
     * PUT /v1/tasks/statuses/{statusId}
     * Update task status information
     *
     * @param statusId ID of a task status (required)
     * @param taskStatusDto Request to update a task status (optional)
     * @return Task updated successfully (status code 200)
     *         or There is no status with same ID (status code 403)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "updateTaskStatus",
        description = "Update task status information",
        tags = { "task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Task updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskStatusDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "There is no status with same ID", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerHttpAuthentication")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/v1/tasks/statuses/{statusId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<TaskStatusDto> updateTaskStatus(
        @Parameter(name = "statusId", description = "ID of a task status", required = true, in = ParameterIn.PATH) @PathVariable("statusId") Long statusId,
        @Parameter(name = "TaskStatusDto", description = "Request to update a task status") @Valid @RequestBody(required = false) TaskStatusDto taskStatusDto
    );

}
