/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.solurion.eclipto.user.api;

import com.solurion.eclipto.user.dto.ErrorDto;
import com.solurion.eclipto.user.dto.JwtAuthenticationResponse;
import com.solurion.eclipto.user.dto.LoginRequest;
import com.solurion.eclipto.user.dto.RegisterRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.4.0")
@Validated
@Tag(name = "auth", description = "the auth API")
public interface AuthApi {

    /**
     * GET /v1/auth/jwks
     * Get jwks to verify the jwt signature
     *
     * @return The user has been found (status code 200)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getJwks",
        description = "Get jwks to verify the jwt signature",
        tags = { "auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The user has been found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/auth/jwks",
        produces = { "application/json" }
    )
    
    ResponseEntity<String> getJwks(
        
    );


    /**
     * POST /v1/auth/login : Login
     * Login using the provided credentials
     *
     * @param loginRequest User login info (required)
     * @return User successfully authenticated (status code 200)
     *         or Wrong password or email (status code 403)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "login",
        summary = "Login",
        description = "Login using the provided credentials",
        tags = { "auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User successfully authenticated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = JwtAuthenticationResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Wrong password or email", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/auth/login",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<JwtAuthenticationResponse> login(
        @Parameter(name = "LoginRequest", description = "User login info", required = true) @Valid @RequestBody LoginRequest loginRequest
    );


    /**
     * POST /v1/auth/register : Register a user
     * Register a new user in the system
     *
     * @param registerRequest User registration info (required)
     * @return User successfully registered (status code 200)
     *         or User with same email already exists (status code 400)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "register",
        summary = "Register a user",
        description = "Register a new user in the system",
        tags = { "auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User successfully registered", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = JwtAuthenticationResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "User with same email already exists", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/auth/register",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<JwtAuthenticationResponse> register(
        @Parameter(name = "RegisterRequest", description = "User registration info", required = true) @Valid @RequestBody RegisterRequest registerRequest
    );

}
